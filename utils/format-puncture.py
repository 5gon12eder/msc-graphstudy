#! /usr/bin/python3
#! -*- coding:utf-8; mode:python; -*-

# Copyright (C) 2018 Moritz Klammler <moritz.klammler@student.kit.edu>
#
# Copying and distribution of this file, with or without modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.  This file is offered as-is, without any warranty.

import argparse
import collections
import glob
import json
import math
import os
import re
import sys

from email.utils import formatdate as format_rfc5322

LAZYOK = None
LAZYOK_ENVVAR = 'MSC_LAZY_EVAL_OKAY'

def main():
    ap = argparse.ArgumentParser(description="Formats JSON confusion matrices with puncture as TeX code.")
    ap.add_argument('-d', '--directory', metavar='DIR', required=True, help="find and use JSON files in DIR")
    ap.add_argument('-o', '--output', metavar='FILE', type=argparse.FileType('w'), help="write to FILE")
    ap.add_argument('-t', '--test', metavar='TEST', type=_test, help="consider success rates for TEST")
    ap.add_argument('-x', '--sort-excl', action='store_const', dest='sort', const='-', help="sort by exclusion column")
    ap.add_argument('-y', '--sort-incl', action='store_const', dest='sort', const='+', help="sort by inclusion column")
    ap.add_argument('-p', '--properties', metavar='FILE', help="read list of properties from FILE (default: use all)")
    ap.add_argument('-r', '--rename', metavar='FILE', type=argparse.FileType('r'),
                    help="rename enums according to mapping read from FILE")
    ns = ap.parse_args()
    data = dict()
    files = set()
    for prop in get_puncture_properties(ns.properties):
        data[prop] = dict()
        for (stem, key) in [ ('without', '-'), ('with', '+') ]:
            filename = os.path.join(ns.directory, 'cross-valid-' + stem + '-' + const.enum_to_json(prop) + '.json')
            try:
                with open(filename, 'r') as istr:
                    data[prop][key] = info_2_mean_stdev(json.load(istr), test=const.enum_to_json(ns.test))
                files.add(filename)
            except FileNotFoundError:
                check_lazy_okay(filename)
    for filename in sorted(set(glob.glob(os.path.join(glob.escape(ns.directory), 'cross-valid-*-*.json'))) - files):
        bemoan(filename, "Note suspicious file (ignored)")
    renamings = { p : p.name for p in const.Properties }
    if ns.rename is not None:
        load_rename_table(ns.rename, renamings)
    print_output(data, ns.output, sort=ns.sort, renamings=renamings)

def info_2_mean_stdev(infos, test=None):
    info = infos if test is None else infos[test]
    return (info['success']['mean'], info['success']['stdev'])

def load_rename_table(istr, table):
    for line in filter(None, map(str.strip, map(lambda s : s.partition('#')[0], istr))):
        [ old, new ] = line.split()
        table[const.Properties[old]] = new

def print_output(data, ostr=None, sort=None, renamings=Ellipsis):
    assert sort is None or sort == '-' or sort == '+'
    scriptname = os.path.basename(__file__)
    timestamp = format_rfc5322(localtime=True)
    print("% -*- coding:utf-8; mode:latex; -*-", file=ostr)
    print("", file=ostr)
    print("%% THIS IS A GENERATED FILE; PLEASE DO NOT EDIT IT MANUALLY!", file=ostr)
    print("%% Generated by {!r} on {!s}".format(scriptname, timestamp), file=ostr)
    print("", file=ostr)
    sortkey = lambda kv : (kv[1][sort][0] if sort in kv[1] else math.nan, kv[0].name)
    for (prop, val) in sorted(data.items(), key=sortkey):
        enumname = renamings[prop]
        assert re.match(r'^[A-Z][0-9A-Z_]*$', enumname)
        texname = enumname.replace('_', '\\_')
        mx = format(100.0 * val['-'][0], '.2f') if '-' in val else str(math.nan)
        sx = format(100.0 * val['-'][1], '.2f') if '-' in val else str(math.nan)
        my = format(100.0 * val['+'][0], '.2f') if '+' in val else str(math.nan)
        sy = format(100.0 * val['+'][1], '.2f') if '+' in val else str(math.nan)
        argvec = ''.join("{" + value + "}" for value in [ mx, sx, my, sy ])
        print(r"\PunctureResult[\enum{" + texname + r"}]" + argvec, file=ostr)

def get_puncture_properties(fromfile=None):
    if fromfile is None:
        return set(const.Properties)
    properties = set()
    try:
        with open(fromfile, 'r') as istr:
            for line in filter(None, map(lambda s : s.partition('#')[0].strip(), istr)):
                try: [ word ] = line.split()
                except ValueError: bemoan(fromfile, "One value per line, please", fatal=True)
                try: prop = const.enum_from_json(const.Properties, word)
                except ValueError: bemoan(fromfile, "Unknown property", word, fatal=True)
                properties.add(prop)
    except OSError as e:
        bemoan(fromfile, "Cannot read file", e.strerror, fatal=True)
    return properties

def check_lazy_okay(filename=None):
    if not LAZYOK:
        if filename is not None:
            bemoan("No such file or directory", filename)
        bemoan("Cannot continue due to missing evaluation data (set {!s}={!r} to continue anyway)"
               .format(LAZYOK_ENVVAR, 1), fatal=True)

def get_lazy_okay():
    assert LAZYOK is None
    envval = os.getenv(LAZYOK_ENVVAR, 0)
    try:
        return int(envval) > 0
    except ValueError:
        bemoan(LAZYOK_ENVVAR, "Not a valid integer", repr(envval))
        return False

def bemoan(*msg, fatal=False):
    script = os.path.basename(__file__)
    print(script, *msg, sep=": ", file=sys.stderr)
    if fatal: raise SystemExit(True)

def _test(token):
    try:
        return const.enum_from_json(const.Tests, token)
    except ValueError as e:
        raise argparse.ArgumentTypeError(str(e))

if __name__ == '__main__':
    if os.path.exists('.msc-graphstudy'):
        sys.path.append(os.getcwd())
    import driver.constants as const
    LAZYOK = get_lazy_okay()
    main()
