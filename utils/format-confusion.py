#! /usr/bin/python3
#! -*- coding:utf-8; mode:python; -*-

# Copyright (C) 2018 Moritz Klammler <moritz.klammler@student.kit.edu>
#
# Copying and distribution of this file, with or without modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.  This file is offered as-is, without any warranty.

import argparse
import contextlib
import json
import math
import os
import sys

from email.utils import formatdate as format_rfc5322

LAZYOK = None
LAZYOK_ENVVAR = 'MSC_LAZY_EVAL_OKAY'

def main():
    ap = argparse.ArgumentParser(description="Formats a JSON confusion matrix as TeX code.")
    ap.add_argument('src', metavar='FILE', help="read from FILE")
    ap.add_argument('-t', '--test', metavar='TEST', type=_test, help="only consider TEST (may not be repeated)")
    ap.add_argument('-o', '--output', metavar='FILE', type=argparse.FileType('w'), help="write to FILE")
    ns = ap.parse_args()
    try:
        with open(ns.src, 'r') if ns.src != '-' else contextlib.nullcontext(sys.stdin) as istr:
            infos = json.load(istr)
    except FileNotFoundError:
        check_lazy_okay(ns.src)
        infos = None
    if ns.test is not None:
        key0 = const.enum_to_json(ns.test)
        _get = lambda *args, **kwargs : get(infos, key0, *args, **kwargs)
    else:
        _get = lambda *args, **kwargs : get(infos, *args, **kwargs)
    number_d = lambda *keys : format(round(_get(*keys, na=0)),  'd').replace(',', '\\,')
    number_f2 = lambda *keys : format(_get(*keys, na=math.nan), '.2f')
    percentage = lambda *keys : format(100.0 * _get(*keys, na=math.nan), '.2f')
    scriptname = os.path.basename(__file__)
    timestamp = format_rfc5322(localtime=True)
    with contextlib.redirect_stdout(ns.output):
        print("% -*- coding:utf-8; mode:latex; -*-")
        print("")
        print("%% THIS IS A GENERATED FILE; PLEASE DO NOT EDIT IT MANUALLY!")
        print("%% Generated by {!r} on {!s}".format(scriptname, timestamp))
        print("")
        print(r"\def\XValTestRuns{" + number_d('test-runs') + r"}")
        print(r"\def\XValCountApprox{" + number_d('test-count', 'mean') + r"}")
        print(r"\def\XValCountMean{" + number_f2('test-count', 'mean') + r"}")
        print(r"\def\XValCountStdev{" + number_f2('test-count', 'stdev') + r"}")
        #
        print(r"\def\XValSuccessMean{"   + percentage('success', 'mean' ) + r"}")
        print(r"\def\XValSuccessStdev{"  + percentage('success', 'stdev') + r"}")
        print(r"\def\XValFailureMean{"   + percentage('failure', 'mean' ) + r"}")
        print(r"\def\XValFailureStdev{"  + percentage('failure', 'stdev') + r"}")
        #
        print(r"\def\XValCondPosMean{"   + percentage('condition-positive', 'mean' ) + r"}")
        print(r"\def\XValCondPosStdev{"  + percentage('condition-positive', 'stdev') + r"}")
        print(r"\def\XValCondNegMean{"   + percentage('condition-negative', 'mean' ) + r"}")
        print(r"\def\XValCondNegStdev{"  + percentage('condition-negative', 'stdev') + r"}")
        #
        print(r"\def\XValPredPosMean{"   + percentage('prediction-positive', 'mean' ) + r"}")
        print(r"\def\XValPredPosStdev{"  + percentage('prediction-positive', 'stdev') + r"}")
        print(r"\def\XValPredNegMean{"   + percentage('prediction-negative', 'mean' ) + r"}")
        print(r"\def\XValPredNegStdev{"  + percentage('prediction-negative', 'stdev') + r"}")
        #
        print(r"\def\XValTrueNegMean{"   + percentage('true-negative',  'mean' ) + r"}")
        print(r"\def\XValTrueNegStdev{"  + percentage('true-negative',  'stdev') + r"}")
        print(r"\def\XValFalseNegMean{"  + percentage('false-negative', 'mean' ) + r"}")
        print(r"\def\XValFalseNegStdev{" + percentage('false-negative', 'stdev') + r"}")
        print(r"\def\XValTruePosMean{"   + percentage('true-positive',  'mean' ) + r"}")
        print(r"\def\XValTruePosStdev{"  + percentage('true-positive',  'stdev') + r"}")
        print(r"\def\XValFalsePosMean{"  + percentage('false-positive', 'mean' ) + r"}")
        print(r"\def\XValFalsePosStdev{" + percentage('false-positive', 'stdev') + r"}")

def get(obj, *keys, na=None):
    if obj is None:
        return na
    for key in keys:
        obj = obj[key]
    return obj

def check_lazy_okay(filename=None):
    if not LAZYOK:
        if filename is not None:
            bemoan("No such file or directory", filename)
        bemoan("Cannot continue due to missing evaluation data (set {!s}={!r} to continue anyway)"
               .format(LAZYOK_ENVVAR, 1), fatal=True)

def get_lazy_okay():
    assert LAZYOK is None
    envval = os.getenv(LAZYOK_ENVVAR, 0)
    try:
        return int(envval) > 0
    except ValueError:
        bemoan(LAZYOK_ENVVAR, "Not a valid integer", repr(envval))
        return False

def bemoan(*msg, fatal=False):
    script = os.path.basename(__file__)
    print(script, *msg, sep=": ", file=sys.stderr)
    if fatal: raise SystemExit(True)

def _test(token):
    try:
        return const.enum_from_json(const.Tests, token)
    except ValueError as e:
        raise argparse.ArgumentTypeError(str(e))

if __name__ == '__main__':
    if os.path.exists('.msc-graphstudy'):
        sys.path.append(os.getcwd())
    import driver.constants as const
    LAZYOK = get_lazy_okay()
    main()
