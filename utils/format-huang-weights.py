#! /usr/bin/python3
#! -*- coding:utf-8; mode:python; -*-

# Copyright (C) 2018 Moritz Klammler <moritz.klammler@student.kit.edu>
#
# Copying and distribution of this file, with or without modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.  This file is offered as-is, without any warranty.

import argparse
import contextlib
import json
import math
import os
import re
import sys

from email.utils import formatdate as format_rfc5322

LAZYOK = None
LAZYOK_ENVVAR = 'MSC_LAZY_EVAL_OKAY'

def main():
    ap = argparse.ArgumentParser(description="Format Huang parameters as TeX code.")
    ap.add_argument('src', metavar='FILE', help="read from JSON file FILE")
    ap.add_argument('-o', '--output', metavar='FILE', type=argparse.FileType('w'), help="write to FILE")
    ap.add_argument('-r', '--rename', metavar='FILE', type=argparse.FileType('r'),
                    help="rename enums according to mapping read from FILE")
    ns = ap.parse_args()
    try:
        with open(ns.src, 'r') if ns.src != '-' else contextlib.nullcontext(sys.stdin) as istr:
            info = json.load(istr)
    except FileNotFoundError:
        check_lazy_okay(ns.src)
        info = { m : (math.nan, math.nan) for m in const.HUANG_METRICS }
    else:
        unpack = lambda d : (d['mean'], d['stdev'])
        info = { m : unpack(info[const.enum_to_json(m)]) for m in const.HUANG_METRICS }
    renamings = { m : m.name for m in const.HUANG_METRICS }
    if ns.rename is not None:
        load_rename_table(ns.rename, renamings)
    scriptname = os.path.basename(__file__)
    timestamp = format_rfc5322(localtime=True)
    print("% -*- coding:utf-8; mode:latex; -*-", file=ns.output)
    print("", file=ns.output)
    print("%% THIS IS A GENERATED FILE; PLEASE DO NOT EDIT IT MANUALLY!", file=ns.output)
    print("%% Generated by {!r} on {!s}".format(scriptname, timestamp), file=ns.output)
    print("", file=ns.output)
    for (metric, params) in sorted(info.items(), key=(lambda kv : abs(kv[1][0])), reverse=True):
        enumname = renamings[metric]
        assert re.match(r'^[A-Z][0-9A-Z_]*$', enumname)
        texname = enumname.replace('_', '\\_')
        arg1 = format(params[0], '+.4f')
        arg2 = format(params[1], '.4f')
        print(r"\HuangWeightResult[" + texname + r"]{" + arg1 + r"}{" + arg2 + r"}", file=ns.output)

def load_rename_table(istr, table):
    for line in filter(None, map(str.strip, map(lambda s : s.partition('#')[0], istr))):
        [ old, new ] = line.split()
        table[const.Metrics[old]] = new

def check_lazy_okay(filename=None):
    if not LAZYOK:
        if filename is not None:
            bemoan("No such file or directory", filename)
        bemoan("Cannot continue due to missing evaluation data (set {!s}={!r} to continue anyway)"
               .format(LAZYOK_ENVVAR, 1), fatal=True)

def get_lazy_okay():
    assert LAZYOK is None
    envval = os.getenv(LAZYOK_ENVVAR, 0)
    try:
        return int(envval) > 0
    except ValueError:
        bemoan(LAZYOK_ENVVAR, "Not a valid integer", repr(envval))
        return False

def bemoan(*msg, fatal=False):
    script = os.path.basename(__file__)
    print(script, *msg, sep=": ", file=sys.stderr)
    if fatal: raise SystemExit(True)

if __name__ == '__main__':
    if os.path.exists('.msc-graphstudy'):
        sys.path.append(os.getcwd())
    import driver.constants as const
    LAZYOK = get_lazy_okay()
    main()
